    # MOVEMENT 2
    
    print("Starting Cartesian action movement ...")
    action2 = Base_pb2.Action()
    action2.name = "Movement 2- Top Right"
    action2.application_data = ""

    feedback = base_cyclic.RefreshFeedback()

    cartesian_pose = action2.reach_pose.target_pose
     These are loaded directly from Kinova Web app (the first three are divided by 100 since it gives them in mm)
    
    cartesian_pose.x = 53.9  /100      # (meters)
    cartesian_pose.y = -7.6 /100    # (meters)
    cartesian_pose.z = .6/100    # (meters)
    cartesian_pose.theta_x = 3.8 # (degrees)
    cartesian_pose.theta_y = 178.5 # (degrees)
    cartesian_pose.theta_z = 82.2 # (degrees)

    e = threading.Event()
    notification_handle = base.OnNotificationActionTopic(
        check_for_end_or_abort(e),
        Base_pb2.NotificationOptions()
    )

    print("Executing action")
    base.ExecuteAction(action2)

    print("Waiting for movement to finish ...")
    finished = e.wait(TIMEOUT_DURATION)
    base.Unsubscribe(notification_handle)
    
    
    # Movement 3
    print("Starting Cartesian action movement ...")
    action3 = Base_pb2.Action()
    action3.name = "Movement 3- Bottom Right"
    action3.application_data = ""

    feedback = base_cyclic.RefreshFeedback()

    cartesian_pose = action3.reach_pose.target_pose
    # These are loaded directly from Kinova Web app (the first three are divided by 100 since it gives them in mm)
    
    cartesian_pose.x = 47.8  /100      # (meters)
    cartesian_pose.y = -7.6 /100    # (meters)
    cartesian_pose.z = .2/100    # (meters)
    cartesian_pose.theta_x = -1.3 # (degrees)
    cartesian_pose.theta_y = 178.5 # (degrees)
    cartesian_pose.theta_z = 83.7 # (degrees)

    e = threading.Event()
    notification_handle = base.OnNotificationActionTopic(
        check_for_end_or_abort(e),
        Base_pb2.NotificationOptions()
    )

    print("Executing action")
    base.ExecuteAction(action3)

    print("Waiting for movement to finish ...")
    finished = e.wait(TIMEOUT_DURATION)
    base.Unsubscribe(notification_handle)
    
    if finished:
        print("Cartesian movement completed")
    else:
        print("Timeout on action notification wait")
    return finished